using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Algorithm_design_3
{

    class Program
    {
        static int height = 20;
        static int width = 60;

        static char[,] mapCharData = new char[width, height];
        static bool[,] glowRiver = new bool[width, height];
        static ConsoleColor[,] mapColorData = new ConsoleColor[width, height];

        /*
            make a list that has the length of height * width
            do the DrawMap to add the proper character at the correct spot
            whenever x = 0 or x = width-1 add "|"
            do a foreach (var line in finalMap)
            everytime line <= do a new line
         */
        static void Main(string[] args)
        {
           
          
            

            /* Console.WriteLine("Please enter map height: ");
             height = Convert.ToInt32(Console.ReadLine());
             Console.WriteLine("Thanks bitch, now enter the width: ");
             width = Convert.ToInt32(Console.ReadLine());
             Console.Clear();*/
            //List<string> finalMap = new List<string>(DrawMap(height, width, forest_char, border_char, mapCharData));
            /*foreach (var line in finalMap)
            {
                Console.WriteLine(line);
            }*/
            CreateMap2();
            DrawMap();
            

        }


        static void CreateMap2()
        {
            for (int y = 0; y < height-1; y++)
            {
                for (int x = 0; x < width-1; x++)
                {
                    mapCharData[x, y] = ' ';
                }
            }
            Random random = new Random();
            // Forest Generation
            char[] forestChar = { '╦', '╬', '^', 'T', 'A', 'Ŧ', ' ', ' ', ' ', ' '};

            
            for (int y = 0; y < height - 1; y++)
            {
                int forestLength = random.Next((width - 1) / 4, (width - 1) / 3);
                for (int x = 0; x < forestLength; x++)
                {
                    if (x < Convert.ToInt32(width * 0.15))
                    {
                        SetPlacement(x, y, forestChar[random.Next(0, 7)], ConsoleColor.DarkGreen);
                    }
                    else
                    {
                        SetPlacement(x, y, forestChar[random.Next(0, 10)], ConsoleColor.DarkGreen);

                    }
                    
                }
            }
            // River Generation
            char[] riverChar = {'|', '/', '\\'};

            int riverStartIndex = random.Next(Convert.ToInt32((width - 1) * 0.66), Convert.ToInt32((width - 1) * 0.75));

            for (int y = 0; y < height-1; y++)
            {
                int randDirection = random.Next(0, 3);
                if (randDirection > 0)
                {
                    if (randDirection > 1)
                    {
                        riverStartIndex++;
                    }
                    else
                    {
                        riverStartIndex--;
                    }
                }

                for (int r = -1; r < 2; r++)
                {
                    SetPlacement(riverStartIndex + r, y, riverChar[randDirection], ConsoleColor.DarkRed);
                    glowRiver[riverStartIndex + r, y] = true;
                    
                }
            }
            
            // Main Road generation
            char roadChar = '#';
            char bridgeChar = '=';
            int bridgeIndex;
            int roadStartIndex = (height - 1) / 2;
            
            bool IsRiver(int x, int y)
            {
                if (x >= width || y >= height || y < 0 || x < 0)
                {
                    return false;
                }
                return mapCharData[x, y] == '/' || mapCharData[x, y] == '|' || mapCharData[x, y] == '\\';
            }

            for (int x = 1; x < width-1; x++)
            {
                if (!IsRiver(x + 2, roadStartIndex) || IsRiver(x + 2, roadStartIndex))
                {
                    int randDirection = random.Next(0, 15);

                    if (randDirection == 0)
                    {
                        roadStartIndex--;
                    }
                    else if (randDirection == 1)
                    {
                        roadStartIndex++;
                    }
                }

                

                //Bridge Generation
                if (IsRiver(x, roadStartIndex - 1))
                {
                    //Small Road Generation
                    /* for (int y = roadStartIndex; y < height-1; y++)
                     {
                         int riverIndex;
                         for (int r = x; r < width -1; r++)
                         {
                             if (mapCharData[r,y] == '/' || mapCharData[r, y] == '|' || mapCharData[r, y] == '\\')
                             {
                                 riverIndex = r;
                                 mapCharData[r - 3, y] = roadChar;
                                 break;
                             }
                         }
                     }*/
                    int riverWidth = 0;

                    SetPlacement(x - 2, roadStartIndex - 1, bridgeChar, ConsoleColor.White);
                    SetPlacement(x - 2, roadStartIndex + 1, bridgeChar, ConsoleColor.White);
                    SetPlacement(x - 1, roadStartIndex - 1, bridgeChar, ConsoleColor.White);
                    SetPlacement(x - 1, roadStartIndex + 1, bridgeChar, ConsoleColor.White);

                    while (IsRiver(x, roadStartIndex -1) || IsRiver(x, roadStartIndex + 1))
                    {
                        if (IsRiver(x + 1, roadStartIndex -1))
                        {
                            riverWidth++;
                        }

                        SetPlacement(x, roadStartIndex + 1, bridgeChar, ConsoleColor.White);
                        SetPlacement(x, roadStartIndex - 1, bridgeChar, ConsoleColor.White);
                    }

                    SetPlacement(x - 1, roadStartIndex + 1, bridgeChar, ConsoleColor.White);
                    SetPlacement(x - 1, roadStartIndex - 1, bridgeChar, ConsoleColor.White);
                    SetPlacement(x - 2, roadStartIndex - 1, bridgeChar, ConsoleColor.White);
                    SetPlacement(x - 2, roadStartIndex + 1, bridgeChar, ConsoleColor.White);


                }

                SetPlacement(x, roadStartIndex, roadChar, ConsoleColor.White);
            }

            



            // Border Generation
            char[] borderChar = { '═', '║' };
            for (int x = 0; x < width-1; x++)
            {
                SetPlacement(x, 0, borderChar[0], ConsoleColor.Magenta);
                SetPlacement(x, height -1, borderChar[0], ConsoleColor.Magenta);
            }
            for (int y = 0; y < height-1; y++)
            {
                SetPlacement(0, y, borderChar[1], ConsoleColor.Magenta);
                SetPlacement(width-1, y, borderChar[1], ConsoleColor.Magenta);
            }
            SetPlacement(0, 0, '╔', ConsoleColor.Magenta);
            SetPlacement(width-1, 0, '╗', ConsoleColor.Magenta);
            SetPlacement(0, height-1, '╚', ConsoleColor.Magenta);
            SetPlacement(width-1, height-1, '╝', ConsoleColor.Magenta);

            //Name Generation
            char[] mapName = "ADVENTURE MAP".ToCharArray();
            int nameIndex = width / 2 - 6;
            foreach (var letter in mapName)
            {
                
                SetPlacement(nameIndex, 1, letter, ConsoleColor.Cyan);
                nameIndex++;
            }


        }

        static void DrawMap()
        {
            //Console.Clear();
            for (int y = 0; y < height; y++)
            {
                
                for (int x = 0; x < width; x++)
                {
                    Console.ForegroundColor = mapColorData[x, y];
                    Console.Write(mapCharData[x, y]);
                }
                Console.WriteLine();
            }
            

            
        }

        
        static void SetPlacement(int x, int y, char input, ConsoleColor colour)
        {
            mapCharData[x, y] = input;
            mapColorData[x, y] = colour;
        }


        /*static void EpicGlowingRiver(int x, int y, ConsoleColor colour1, ConsoleColor colour2, int timer)
        {
            int tempTimer = timer;
            timer = timer * 1000;
            foreach (bool index in glowRiver)
            {
                if (index)
                {
                    Thread.Sleep(timer);
                    ColorChar(x, y, colour1);
                    //DrawMap();
                    Thread.Sleep(timer);
                    ColorChar(x, y, colour2);
                    //DrawMap();
                }
            }
            EpicGlowingRiver(x, y, colour1, colour2,tempTimer);
        }

        /*static List<string> DrawMap(int height, int width, string[] forestChar, string[] borderChar, char[,] mapCharData)
        {
            int roll = 0;
            int fixedBonus = 90;
            string mapLine = "";
            /* List<string> finalMap = new List<string>();
             for (int y = 0; y < height; y++)
             {   
                 for (int x = 0; x < width; x++)
                 {
                     if (y == 0 || y == height - 1)
                     {
                         if (x == 0 || x == width - 1)
                         {
                             mapLine += borderChar[0];
                         }
                         else
                         {
                             mapLine += borderChar[1];

                         }
                     }
                     else if (x == 0 || x == width - 1)
                     {
                         mapLine += borderChar[2];
                     }
                     else if (x < width / 25)
                     {
                         roll = Roll(100, fixedBonus);
                         fixedBonus -=5;
                         if (roll > 20)
                         {
                             mapLine += forestChar[Roll(5)];
                         }
                         else
                         {
                             mapLine += " ";
                         }
                     }
                     else
                     {
                         mapLine += " ";

                     }

                 }
                 finalMap.Add(mapLine);
                 mapLine = "";
             }
             return finalMap;

         }

         static int Roll(int percentage, int fixedBonus = 0)
         {
             var random = new Random();
             int result = 0;
             result += random.Next(1, percentage + 1);

             result += fixedBonus;
             return result;
         }*/


    }
}
